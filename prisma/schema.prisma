generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                       String               @id @default(cuid())
  username                 String               @unique
  password                 String
  name                     String?
  role                     Role                 @default(VIEWER)
  createdAt                DateTime             @default(now())
  updatedAt                DateTime             @updatedAt
  status                   UserStatus           @default(PENDING)
  eventsCreated            Event[]              @relation("EventCreatedBy")
  eventParticipationsAdded EventParticipation[] @relation("EventParticipationAddedBy")
  gameEventsCreated        GameEvent[]          @relation("GameEventCreatedBy")
  uploads                  Upload[]
}

model Season {
  id          String     @id @default(cuid())
  name        String     @unique
  startDate   DateTime
  endDate     DateTime?
  isActive    Boolean    @default(false)
  description String?
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
  snapshots   Snapshot[]

  @@index([isActive])
  @@index([startDate])
}

model Player {
  lordId              String               @id
  currentName         String
  createdAt           DateTime             @default(now())
  updatedAt           DateTime             @updatedAt
  hasLeftRealm        Boolean              @default(false)
  lastSeenAt          DateTime?
  leftRealmAt         DateTime?
  allianceHistory     AllianceChange[]
  eventParticipations EventParticipation[]
  nameHistory         NameChange[]
  playerEventRoles    PlayerEventRole[]
  snapshots           PlayerSnapshot[]
  teamRoster          TeamRoster[]

  @@index([currentName])
  @@index([hasLeftRealm])
  @@index([lastSeenAt])
}

model NameChange {
  id         String   @id @default(cuid())
  playerId   String
  oldName    String
  newName    String
  detectedAt DateTime
  player     Player   @relation(fields: [playerId], references: [lordId], onDelete: Cascade)

  @@index([playerId])
  @@index([detectedAt])
}

model AllianceChange {
  id            String   @id @default(cuid())
  playerId      String
  oldAlliance   String?
  oldAllianceId String?
  newAlliance   String?
  newAllianceId String?
  detectedAt    DateTime
  player        Player   @relation(fields: [playerId], references: [lordId], onDelete: Cascade)

  @@index([playerId])
  @@index([detectedAt])
}

model PlayerSnapshot {
  id                  String   @id @default(cuid())
  playerId            String
  snapshotId          String
  name                String
  division            Int
  allianceId          String?
  allianceTag         String?
  currentPower        String
  power               String
  buildingPower       String
  heroPower           String
  legionPower         String
  techPower           String
  merits              String
  unitsKilled         String
  unitsDead           String
  unitsHealed         String
  t1KillCount         String
  t2KillCount         String
  t3KillCount         String
  t4KillCount         String
  t5KillCount         String
  victories           Int
  defeats             Int
  citySieges          Int
  scouted             Int
  helpsGiven          Int
  resourcesGiven      String
  resourcesGivenCount Int
  gold                String
  goldSpent           String
  wood                String
  woodSpent           String
  ore                 String
  oreSpent            String
  mana                String
  manaSpent           String
  gems                String
  gemsSpent           String
  cityLevel           Int
  faction             String?
  player              Player   @relation(fields: [playerId], references: [lordId], onDelete: Cascade)
  snapshot            Snapshot @relation(fields: [snapshotId], references: [id], onDelete: Cascade)

  @@unique([playerId, snapshotId])
  @@index([snapshotId])
  @@index([playerId])
}

model Snapshot {
  id        String           @id @default(cuid())
  timestamp DateTime
  filename  String
  kingdom   String
  uploadId  String
  createdAt DateTime         @default(now())
  seasonId  String?
  players   PlayerSnapshot[]
  season    Season?          @relation(fields: [seasonId], references: [id])
  upload    Upload           @relation(fields: [uploadId], references: [id], onDelete: Cascade)

  @@index([timestamp])
  @@index([kingdom])
  @@index([seasonId])
}

model Upload {
  id            String       @id @default(cuid())
  filename      String
  userId        String
  status        UploadStatus @default(PROCESSING)
  error         String?
  rowsProcessed Int          @default(0)
  createdAt     DateTime     @default(now())
  snapshots     Snapshot[]
  uploadedBy    User         @relation(fields: [userId], references: [id])

  @@index([userId])
  @@index([status])
}

model Event {
  id             String               @id @default(cuid())
  name           String
  startDate      DateTime
  endDate        DateTime?
  description    String?
  isActive       Boolean              @default(true)
  createdById    String
  createdAt      DateTime             @default(now())
  updatedAt      DateTime             @updatedAt
  createdBy      User                 @relation("EventCreatedBy", fields: [createdById], references: [id])
  participations EventParticipation[]
  teams          EventTeam[]

  @@index([startDate])
  @@index([isActive])
  @@index([createdById])
}

model EventTeam {
  id             String               @id @default(cuid())
  eventId        String
  name           String
  color          String?
  description    String?
  createdAt      DateTime             @default(now())
  updatedAt      DateTime             @updatedAt
  participations EventParticipation[]
  event          Event                @relation(fields: [eventId], references: [id], onDelete: Cascade)

  @@unique([eventId, name])
  @@index([eventId])
}

model EventParticipation {
  id        String     @id @default(cuid())
  eventId   String
  playerId  String
  joinedAt  DateTime   @default(now())
  leftAt    DateTime?
  notes     String?
  addedById String
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
  teamId    String?
  addedBy   User       @relation("EventParticipationAddedBy", fields: [addedById], references: [id])
  event     Event      @relation(fields: [eventId], references: [id], onDelete: Cascade)
  player    Player     @relation(fields: [playerId], references: [lordId], onDelete: Cascade)
  team      EventTeam? @relation(fields: [teamId], references: [id])

  @@unique([eventId, playerId])
  @@index([eventId])
  @@index([teamId])
  @@index([playerId])
  @@index([addedById])
}

model EventRole {
  id          String            @id @default(cuid())
  name        String            @unique
  description String?
  isActive    Boolean           @default(true)
  sortOrder   Int               @default(0)
  color       String?
  createdAt   DateTime          @default(now())
  updatedAt   DateTime          @updatedAt
  playerRoles PlayerEventRole[]

  @@index([isActive])
  @@index([sortOrder])
}

model PersistentTeam {
  id          String       @id @default(cuid())
  name        String       @unique
  description String?
  color       String?
  isActive    Boolean      @default(true)
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
  roster      TeamRoster[]
  gameEvents  GameEvent[]  @relation("GameEventToPersistentTeam")

  @@index([isActive])
  @@index([name])
}

model TeamRoster {
  id         String         @id @default(cuid())
  teamId     String
  playerId   String
  position   RosterPosition @default(STARTER)
  dateJoined DateTime       @default(now())
  dateLeft   DateTime?
  isActive   Boolean        @default(true)
  notes      String?
  player     Player         @relation(fields: [playerId], references: [lordId], onDelete: Cascade)
  team       PersistentTeam @relation(fields: [teamId], references: [id], onDelete: Cascade)

  @@unique([teamId, playerId])
  @@index([teamId])
  @@index([playerId])
  @@index([isActive])
  @@index([position])
}

model GameEvent {
  id          String            @id @default(cuid())
  name        String
  description String?
  eventDate   DateTime
  status      EventStatus       @default(DRAFT)
  eventType   String            @default("ROW")
  maxTeams    Int               @default(3)
  outcome     String?
  notes       String?
  createdById String
  createdAt   DateTime          @default(now())
  updatedAt   DateTime          @updatedAt
  createdBy   User              @relation("GameEventCreatedBy", fields: [createdById], references: [id])
  playerRoles PlayerEventRole[]
  teams       PersistentTeam[]  @relation("GameEventToPersistentTeam")

  @@index([eventDate])
  @@index([status])
  @@index([eventType])
  @@index([createdById])
}

model PlayerEventRole {
  id                String    @id @default(cuid())
  gameEventId       String
  playerId          String
  roleId            String
  garrisonPoints    Int       @default(0)
  seedPoints        Int       @default(0)
  killPoints        Int       @default(0)
  totalPoints       Int       @default(0)
  performanceRating String?
  mvpVotes          Int       @default(0)
  notes             String?
  createdAt         DateTime  @default(now())
  updatedAt         DateTime  @updatedAt
  gameEvent         GameEvent @relation(fields: [gameEventId], references: [id], onDelete: Cascade)
  player            Player    @relation(fields: [playerId], references: [lordId], onDelete: Cascade)
  role              EventRole @relation(fields: [roleId], references: [id])

  @@unique([gameEventId, playerId, roleId])
  @@index([gameEventId])
  @@index([playerId])
  @@index([roleId])
  @@index([totalPoints])
  @@index([killPoints])
}

enum Role {
  ADMIN
  VIEWER
  EVENT_MANAGER
}

enum UserStatus {
  PENDING
  APPROVED
  REJECTED
}

enum UploadStatus {
  PROCESSING
  COMPLETED
  FAILED
}

enum EventStatus {
  DRAFT
  ACTIVE
  SCORING
  FINALIZED
}

enum RosterPosition {
  STARTER
  SUBSTITUTE
}
