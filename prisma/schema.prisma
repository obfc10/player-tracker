// prisma/schema.prisma
generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                        String                @id @default(cuid())
  username                  String                @unique
  password                  String
  name                      String?
  role                      Role                  @default(VIEWER)
  status                    UserStatus            @default(PENDING)
  createdAt                 DateTime              @default(now())
  updatedAt                 DateTime              @updatedAt
  uploads                   Upload[]
  eventsCreated             Event[]               @relation("EventCreatedBy")
  eventParticipationsAdded  EventParticipation[]  @relation("EventParticipationAddedBy")
  
  // New ROW relations
  gameEventsCreated         GameEvent[]           @relation("GameEventCreatedBy")
}

enum Role {
  ADMIN
  EVENT_MANAGER
  VIEWER
}

enum UserStatus {
  PENDING
  APPROVED
  REJECTED
}

model Season {
  id          String     @id @default(cuid())
  name        String     @unique
  startDate   DateTime
  endDate     DateTime?
  isActive    Boolean    @default(false)
  description String?
  snapshots   Snapshot[]
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
  
  @@index([isActive])
  @@index([startDate])
}

model Player {
  lordId              String                @id
  currentName         String
  nameHistory         NameChange[]
  allianceHistory     AllianceChange[]
  snapshots           PlayerSnapshot[]
  eventParticipations EventParticipation[]
  
  // New ROW relations
  teamRoster          TeamRoster[]
  playerEventRoles    PlayerEventRole[]
  
  createdAt           DateTime              @default(now())
  updatedAt           DateTime              @updatedAt
  
  // Realm status tracking
  hasLeftRealm        Boolean               @default(false)
  lastSeenAt          DateTime?
  leftRealmAt         DateTime?
  
  @@index([currentName])
  @@index([hasLeftRealm])
  @@index([lastSeenAt])
}

model NameChange {
  id         String   @id @default(cuid())
  player     Player   @relation(fields: [playerId], references: [lordId], onDelete: Cascade)
  playerId   String
  oldName    String
  newName    String
  detectedAt DateTime
  
  @@index([playerId])
  @@index([detectedAt])
}

model AllianceChange {
  id            String   @id @default(cuid())
  player        Player   @relation(fields: [playerId], references: [lordId], onDelete: Cascade)
  playerId      String
  oldAlliance   String?
  oldAllianceId String?
  newAlliance   String?
  newAllianceId String?
  detectedAt    DateTime
  
  @@index([playerId])
  @@index([detectedAt])
}

model PlayerSnapshot {
  id                    String   @id @default(cuid())
  player                Player   @relation(fields: [playerId], references: [lordId], onDelete: Cascade)
  playerId              String
  snapshot              Snapshot @relation(fields: [snapshotId], references: [id], onDelete: Cascade)
  snapshotId            String
  
  // Player identification (Columns 1-5)
  name                  String   // Column 2
  division              Int      // Column 3
  allianceId            String?  // Column 4
  allianceTag           String?  // Column 5
  
  // Power metrics (Columns 6-7, 17-20)
  currentPower          String   // Column 6 - Stored as string to handle large numbers
  power                 String   // Column 7
  buildingPower         String   // Column 17
  heroPower             String   // Column 18
  legionPower           String   // Column 19
  techPower             String   // Column 20
  
  // Combat statistics (Columns 8-16)
  merits                String   // Column 8
  unitsKilled           String   // Column 9
  unitsDead             String   // Column 10
  unitsHealed           String   // Column 11
  t1KillCount           String   // Column 12
  t2KillCount           String   // Column 13
  t3KillCount           String   // Column 14
  t4KillCount           String   // Column 15
  t5KillCount           String   // Column 16
  
  // Battle statistics (Columns 21-24)
  victories             Int      // Column 21
  defeats               Int      // Column 22
  citySieges            Int      // Column 23
  scouted               Int      // Column 24
  
  // Alliance activity (Column 25, 36-37)
  helpsGiven            Int      // Column 25
  resourcesGiven        String   // Column 36
  resourcesGivenCount   Int      // Column 37
  
  // Resources (Columns 26-35)
  gold                  String   // Column 26
  goldSpent             String   // Column 27
  wood                  String   // Column 28
  woodSpent             String   // Column 29
  ore                   String   // Column 30
  oreSpent              String   // Column 31
  mana                  String   // Column 32
  manaSpent             String   // Column 33
  gems                  String   // Column 34
  gemsSpent             String   // Column 35
  
  // Player info (Columns 38-39)
  cityLevel             Int      // Column 38
  faction               String?  // Column 39
  
  @@unique([playerId, snapshotId])
  @@index([snapshotId])
  @@index([playerId])
}

model Snapshot {
  id          String           @id @default(cuid())
  timestamp   DateTime
  filename    String
  kingdom     String
  upload      Upload           @relation(fields: [uploadId], references: [id], onDelete: Cascade)
  uploadId    String
  season      Season?          @relation(fields: [seasonId], references: [id])
  seasonId    String?
  players     PlayerSnapshot[]
  createdAt   DateTime         @default(now())
  
  @@index([timestamp])
  @@index([kingdom])
  @@index([seasonId])
}

model Upload {
  id         String       @id @default(cuid())
  filename   String
  uploadedBy User         @relation(fields: [userId], references: [id])
  userId     String
  snapshots  Snapshot[]
  status     UploadStatus @default(PROCESSING)
  error      String?
  rowsProcessed Int       @default(0)
  createdAt  DateTime     @default(now())
  
  @@index([userId])
  @@index([status])
}

enum UploadStatus {
  PROCESSING
  COMPLETED
  FAILED
}

model Event {
  id                    String                @id @default(cuid())
  name                  String
  startDate             DateTime
  endDate               DateTime?
  description           String?
  isActive              Boolean               @default(true)
  createdBy             User                  @relation("EventCreatedBy", fields: [createdById], references: [id])
  createdById           String
  teams                 EventTeam[]
  participations        EventParticipation[]
  createdAt             DateTime              @default(now())
  updatedAt             DateTime              @updatedAt
  
  @@index([startDate])
  @@index([isActive])
  @@index([createdById])
}

model EventTeam {
  id                    String                @id @default(cuid())
  event                 Event                 @relation(fields: [eventId], references: [id], onDelete: Cascade)
  eventId               String
  name                  String
  color                 String?               // Hex color for UI display
  description           String?
  participations        EventParticipation[]
  createdAt             DateTime              @default(now())
  updatedAt             DateTime              @updatedAt
  
  @@unique([eventId, name])
  @@index([eventId])
}

model EventParticipation {
  id          String     @id @default(cuid())
  event       Event      @relation(fields: [eventId], references: [id], onDelete: Cascade)
  eventId     String
  team        EventTeam? @relation(fields: [teamId], references: [id], onDelete: SetNull)
  teamId      String?
  player      Player     @relation(fields: [playerId], references: [lordId], onDelete: Cascade)
  playerId    String
  joinedAt    DateTime   @default(now())
  leftAt      DateTime?
  notes       String?
  addedBy     User       @relation("EventParticipationAddedBy", fields: [addedById], references: [id])
  addedById   String
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
  
  @@unique([eventId, playerId])
  @@index([eventId])
  @@index([teamId])
  @@index([playerId])
  @@index([addedById])
}

// ROW-specific models for enhanced event management

enum EventStatus {
  DRAFT       // Teams assigned, not started
  ACTIVE      // Event in progress
  SCORING     // Results being entered
  FINALIZED   // Locked, affects rankings
}

enum RosterPosition {
  STARTER
  SUBSTITUTE
}

model EventRole {
  id              String              @id @default(cuid())
  name            String              @unique
  description     String?
  isActive        Boolean             @default(true)
  sortOrder       Int                 @default(0)
  color           String?             // Hex color for UI display
  playerRoles     PlayerEventRole[]
  createdAt       DateTime            @default(now())
  updatedAt       DateTime            @updatedAt
  
  @@index([isActive])
  @@index([sortOrder])
}

model PersistentTeam {
  id              String              @id @default(cuid())
  name            String              @unique
  description     String?
  color           String?             // Team color for UI
  isActive        Boolean             @default(true)
  roster          TeamRoster[]
  gameEvents      GameEvent[]
  createdAt       DateTime            @default(now())
  updatedAt       DateTime            @updatedAt
  
  @@index([isActive])
  @@index([name])
}

model TeamRoster {
  id              String              @id @default(cuid())
  team            PersistentTeam      @relation(fields: [teamId], references: [id], onDelete: Cascade)
  teamId          String
  player          Player              @relation(fields: [playerId], references: [lordId], onDelete: Cascade)
  playerId        String
  position        RosterPosition      @default(STARTER)
  dateJoined      DateTime            @default(now())
  dateLeft        DateTime?
  isActive        Boolean             @default(true)
  notes           String?
  
  @@unique([teamId, playerId])
  @@index([teamId])
  @@index([playerId])
  @@index([isActive])
  @@index([position])
}

model GameEvent {
  id              String              @id @default(cuid())
  name            String
  description     String?
  eventDate       DateTime
  status          EventStatus         @default(DRAFT)
  eventType       String              @default("ROW") // ROW, Behemoth, etc.
  maxTeams        Int                 @default(3)
  outcome         String?             // Winner team name or "Draw"
  notes           String?
  teams           PersistentTeam[]
  playerRoles     PlayerEventRole[]
  createdBy       User                @relation("GameEventCreatedBy", fields: [createdById], references: [id])
  createdById     String
  createdAt       DateTime            @default(now())
  updatedAt       DateTime            @updatedAt
  
  @@index([eventDate])
  @@index([status])
  @@index([eventType])
  @@index([createdById])
}

model PlayerEventRole {
  id              String              @id @default(cuid())
  gameEvent       GameEvent           @relation(fields: [gameEventId], references: [id], onDelete: Cascade)
  gameEventId     String
  player          Player              @relation(fields: [playerId], references: [lordId], onDelete: Cascade)
  playerId        String
  role            EventRole           @relation(fields: [roleId], references: [id])
  roleId          String
  
  // Performance scores
  garrisonPoints  Int                 @default(0)
  seedPoints      Int                 @default(0)
  killPoints      Int                 @default(0)
  totalPoints     Int                 @default(0) // Calculated field
  
  // Additional tracking
  performanceRating String?           // S, A, B, C rating
  mvpVotes        Int                 @default(0)
  notes           String?
  
  createdAt       DateTime            @default(now())
  updatedAt       DateTime            @updatedAt
  
  @@unique([gameEventId, playerId, roleId])
  @@index([gameEventId])
  @@index([playerId])
  @@index([roleId])
  @@index([totalPoints])
  @@index([killPoints]) // Most important metric
}

